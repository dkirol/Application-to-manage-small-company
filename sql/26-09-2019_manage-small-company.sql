CREATE TABLE employees (
id_employee INTEGER GENERATED BY DEFAULT AS IDENTITY,
first_name VARCHAR2(40),
last_name VARCHAR2(50),
pesel NUMBER(11),
department VARCHAR2(60),
id_manager INTEGER,
CONSTRAINT c_manager FOREIGN KEY(id_manager) REFERENCES employees(id_employee),
CONSTRAINT pk_employees PRIMARY KEY (id_employee)
);

--TUTAJ DO ZALOZENIA INDEKS NA KOLUMNY id_employee i id_customer
CREATE TABLE contacts (
id_employee INTEGER,
id_customer INTEGER,
city VARCHAR2(50) NOT NULL,
street VARCHAR2(50) NOT NULL,
num CHAR(10),
phone NUMBER(9),
mail VARCHAR2(40),
CONSTRAINT fk_contact_employees FOREIGN KEY(id_employee) REFERENCES employees (id_employee),
CONSTRAINT fk_contacts_customers FOREIGN KEY(id_customer) REFERENCES customers(id_customer)
);

CREATE TABLE customers (
id_customer INTEGER GENERATED BY DEFAULT AS IDENTITY,
first_name VARCHAR2(30),
last_name VARCHAR2(30),
pesel NUMBER(11),
CONSTRAINT pk_customers PRIMARY KEY (id_customer)
);

CREATE TABLE accounts (
id_account INTEGER GENERATED BY DEFAULT AS IDENTITY,
login VARCHAR2(60),
password CHAR(64),
id_employee INTEGER DEFAULT NULL,
id_customer INTEGER DEFAULT NULL,
CONSTRAINT pk_account PRIMARY KEY(id_account),
CONSTRAINT fk_accounts_employees FOREIGN KEY (id_employee) REFERENCES employees(id_employee),
CONSTRAINT fk_accounts_customers FOREIGN KEY(id_customer) REFERENCES customers(id_customer)
);

CREATE TABLE mail_rst_pass (
id_mail_rst_pass INTEGER GENERATED BY DEFAULT AS IDENTITY,
id_account INTEGER,
date_reset TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
generated_code INTEGER,
succesfull CHAR(1) DEFAULT 0,
CONSTRAINT pk_mail_rst_pass PRIMARY KEY(id_mail_rst_pass),
CONSTRAINT fk_mail_rst_pass_accounts FOREIGN KEY (id_account) REFERENCES accounts(id_account)
);


CREATE TABLE employment (
id_employee INTEGER,
type_of_employment VARCHAR(30),
salary NUMBER(10, 2),
started_work DATE,
finished_work DATE DEFAULT NULL,
count_free_day NUMBER(4,1),
student_state CHAR(1) DEFAULT 0,
CONSTRAINT pk_employment PRIMARY KEY (id_employee),
CONSTRAINT fk_employment_employees FOREIGN KEY (id_employee) REFERENCES employees(id_employee)
);

CREATE TABLE holiday (
id_holiday INTEGER GENERATED BY DEFAULT AS IDENTITY,
id_employee INTEGER,
number_of_days INTEGER,
type_of_holiday VARCHAR2(60),
start_holiday DATE,
end_holiday DATE,
confirmed CHAR(1) DEFAULT 0,
CONSTRAINT pk_holiday PRIMARY KEY(id_holiday),
CONSTRAINT fk_holiday_employees FOREIGN KEY (id_employee) REFERENCES employees (id_employee)
);

/*
CREATE TABLE participants (
id_customer INTEGER,
id_course INTEGER,
age NUMBER(2),
group NUMBER(2),
CONSTRAINT pk_participant PRIMARY KEY (id_customer, group),
CONSTRAINT check_group CHECK (group < 50),
CONSTRAINT fk_participant_customers FOREIGN KEY (id_customer) REFERENCES customers(id_customer),
CONSTRAINT fk_participant_courses FOREIGN KEY (id_course) REFERENCES courses(id_course)
);

CREATE TABLE courses(
id_course INTEGER GENERATED BY DEFAULT AS IDENTITY,
course_name VARCHAR2(40),
price NUMBER(10,2),
start_course DATE,
finish_course DATE,
description VARCHAR2(150),
CONSTRAINT pk_courses PRIMARY KEY (id_course)
); */


CREATE TABLE products(
id_product INTEGER GENERATED BY DEFAULT AS IDENTITY,
product_name VARCHAR2(40),
price NUMBER(10,2),
CONSTRAINT pk_products PRIMARY KEY (id_product)
);

CREATE TABLE hour_in_work (
id_hour_in_work INTEGER GENERATED BY DEFAULT AS IDENTITY,
id_employee INTEGER,
date_in_work DATE DEFAULT CURRENT_DATE,
start_work TIMESTAMP,
finish_work TIMESTAMP,
CONSTRAINT pk_hour_in_work PRIMARY KEY (id_hour_in_work),
CONSTRAINT fk_hour_in_work_employees FOREIGN KEY (id_employee) REFERENCES employees(id_employee)
);

CREATE TABLE task_for_employees (
id_task INTEGER GENERATED BY DEFAULT AS IDENTITY,
id_employee INTEGER,
duration NUMBER(5,2),
stage NUMBER(1) DEFAULT 1,
description VARCHAR2(500),
CONSTRAINT pk_task_for_employees PRIMARY KEY(id_task)
);


CREATE TABLE orders (
id_order INTEGER GENERATED BY DEFAULT AS IDENTITY,
id_customer INTEGER,
id_product INTEGER,
type_pay CHAR(4),
count_part_pay NUMBER(3),
order_date TIMESTAMP,
CONSTRAINT pk_orders PRIMARY KEY (id_order),
CONSTRAINT fk_orders_customer FOREIGN KEY (id_customer) REFERENCES customers(id_customer),
CONSTRAINT fk_orders_products FOREIGN KEY (id_product) REFERENCES products (id_product)
);

CREATE TABLE part_pay (
id_part_pay INTEGER GENERATED BY DEFAULT AS IDENTITY,
id_order INTEGER,
number_of_payment INTEGER,
amount NUMBER(6,2),
end_pay_date DATE,
confirmed CHAR(1) DEFAULT 0,
CONSTRAINT pk_part_pay PRIMARY KEY (id_part_pay),
CONSTRAINT fk_part_pay_orders FOREIGN KEY (id_order) REFERENCES orders(id_order)
);

CREATE TABLE late_payment(
id_late_payment INTEGER GENERATED BY DEFAULT AS IDENTITY,
notification VARCHAR2(200),
date_send DATE DEFAULT CURRENT_DATE,
id_part_pay INTEGER INVISIBLE,
id_order INTEGER,
id_customer INTEGER,
sendto VARCHAR2(50),
number_of_payment INTEGER,
CONSTRAINT pk_late_payment PRIMARY KEY(id_late_payment),
CONSTRAINT fk_late_payment_customer FOREIGN KEY(id_customer) REFERENCES customers(id_customer),
CONSTRAINT fk_late_payment_part_pay FOREIGN KEY(id_part_pay) REFERENCES part_pay(id_part_pay)
);

CREATE TABLE products_on_promotion (
id_product INTEGER,
new_price NUMBER(10,2),
start_promotion TIMESTAMP,
days_promotion INTEGER,
CONSTRAINT fk_products_pro_in_promo FOREIGN KEY (id_product) REFERENCES products_on_promotion(id_product)
);